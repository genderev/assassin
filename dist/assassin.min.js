/*
 MIT
 @preserve
*/
(function(g,k){"object"===typeof exports&&"undefined"!==typeof module?module.exports=k():"function"===typeof define&&define.amd?define(k):g.AVLTree=k()})(this,function(){function g(b,a){void 0===a&&(a=function(d){return d.key});var c=[];k(b,"",!0,function(d){return c.push(d)},a);return c.join("")}function k(b,a,c,d,e){b&&(d(""+a+(c?"\u2514\u2500\u2500 ":"\u251c\u2500\u2500 ")+e(b)+"\n"),a+=c?"    ":"\u2502   ",b.left&&k(b.left,a,!1,d,e),b.right&&k(b.right,a,!0,d,e))}function m(b){if(null===b)return!0;
var a=n(b.left),c=n(b.right);return 1>=Math.abs(a-c)&&m(b.left)&&m(b.right)?!0:!1}function n(b){return b?1+Math.max(n(b.left),n(b.right)):0}function q(b,a,c,d,e){var h=e-d;return 0<h?(h=d+Math.floor(h/2),b={key:a[h],data:c[h],parent:b},b.left=q(b,a,c,d,h),b.right=q(b,a,c,h+1,e),b):null}function r(b){if(null===b)return 0;var a=r(b.left),c=r(b.right);b.balanceFactor=a-c;return Math.max(a,c)+1}function v(b,a,c,d,e){if(!(c>=d)){for(var h=b[c+d>>1],l=c-1,p=d+1;;){do l++;while(0>e(b[l],h));do p--;while(0<
e(b[p],h));if(l>=p)break;var w=b[l];b[l]=b[p];b[p]=w;w=a[l];a[l]=a[p];a[p]=w}v(b,a,c,p,e);v(b,a,p+1,d,e)}}function y(b,a){return b>a?1:b<a?-1:0}function t(b){var a=b.right;if(b.right=a.left)a.left.parent=b;a.parent=b.parent;a.parent&&(a.parent.left===b?a.parent.left=a:a.parent.right=a);b.parent=a;a.left=b;b.balanceFactor+=1;0>a.balanceFactor&&(b.balanceFactor-=a.balanceFactor);a.balanceFactor+=1;0<b.balanceFactor&&(a.balanceFactor+=b.balanceFactor);return a}function u(b){var a=b.left;b.left=a.right;
b.left&&(b.left.parent=b);a.parent=b.parent;a.parent&&(a.parent.left===b?a.parent.left=a:a.parent.right=a);b.parent=a;a.right=b;--b.balanceFactor;0<a.balanceFactor&&(b.balanceFactor-=a.balanceFactor);--a.balanceFactor;0>b.balanceFactor&&(a.balanceFactor+=b.balanceFactor);return a}var f=function(b,a){void 0===a&&(a=!1);this._comparator=b||y;this._root=null;this._size=0;this._noDuplicates=!!a},x={size:{configurable:!0}};f.prototype.destroy=function(){return this.clear()};f.prototype.clear=function(){this._root=
null;this._size=0;return this};x.size.get=function(){return this._size};f.prototype.contains=function(b){if(this._root)for(var a=this._root,c=this._comparator;a;){var d=c(b,a.key);if(0===d)return!0;a=0>d?a.left:a.right}return!1};f.prototype.next=function(b){var a=b;if(a)if(a.right)for(a=a.right;a.left;)a=a.left;else for(a=b.parent;a&&a.right===b;)b=a,a=a.parent;return a};f.prototype.prev=function(b){var a=b;if(a)if(a.left)for(a=a.left;a.right;)a=a.right;else for(a=b.parent;a&&a.left===b;)b=a,a=a.parent;
return a};f.prototype.forEach=function(b){for(var a=this._root,c=[],d=!1,e=0;!d;)a?(c.push(a),a=a.left):0<c.length?(a=c.pop(),b(a,e++),a=a.right):d=!0;return this};f.prototype.range=function(b,a,c,d){for(var e=[],h=this._comparator,l=this._root,p;0!==e.length||l;)if(l)e.push(l),l=l.left;else{l=e.pop();p=h(l.key,a);if(0<p)break;else if(0<=h(l.key,b)&&c.call(d,l))break;l=l.right}return this};f.prototype.keys=function(){for(var b=this._root,a=[],c=[],d=!1;!d;)b?(a.push(b),b=b.left):0<a.length?(b=a.pop(),
c.push(b.key),b=b.right):d=!0;return c};f.prototype.values=function(){for(var b=this._root,a=[],c=[],d=!1;!d;)b?(a.push(b),b=b.left):0<a.length?(b=a.pop(),c.push(b.data),b=b.right):d=!0;return c};f.prototype.at=function(b){for(var a=this._root,c=[],d=!1,e=0;!d;)if(a)c.push(a),a=a.left;else if(0<c.length){a=c.pop();if(e===b)return a;e++;a=a.right}else d=!0;return null};f.prototype.minNode=function(){var b=this._root;if(!b)return null;for(;b.left;)b=b.left;return b};f.prototype.maxNode=function(){var b=
this._root;if(!b)return null;for(;b.right;)b=b.right;return b};f.prototype.min=function(){var b=this._root;if(!b)return null;for(;b.left;)b=b.left;return b.key};f.prototype.max=function(){var b=this._root;if(!b)return null;for(;b.right;)b=b.right;return b.key};f.prototype.isEmpty=function(){return!this._root};f.prototype.pop=function(){var b=this._root,a=null;if(b){for(;b.left;)b=b.left;a={key:b.key,data:b.data};this.remove(b.key)}return a};f.prototype.popMax=function(){var b=this._root,a=null;if(b){for(;b.right;)b=
b.right;a={key:b.key,data:b.data};this.remove(b.key)}return a};f.prototype.find=function(b){for(var a=this._root,c,d=this._comparator;a;){c=d(b,a.key);if(0===c)return a;a=0>c?a.left:a.right}return null};f.prototype.insert=function(b,a){if(!this._root)return this._root={parent:null,left:null,right:null,balanceFactor:0,key:b,data:a},this._size++,this._root;var c=this._comparator,d=this._root,e=null,h=0;if(this._noDuplicates)for(;d;){h=c(b,d.key);e=d;if(0===h)return null;d=0>h?d.left:d.right}else for(;d;)h=
c(b,d.key),e=d,d=0>=h?d.left:d.right;d={left:null,right:null,balanceFactor:0,parent:e,key:b,data:a};for(0>=h?e.left=d:e.right=d;e;){h=c(e.key,b);0>h?--e.balanceFactor:e.balanceFactor+=1;if(0===e.balanceFactor)break;else if(-1>e.balanceFactor){1===e.right.balanceFactor&&u(e.right);c=t(e);e===this._root&&(this._root=c);break}else if(1<e.balanceFactor){-1===e.left.balanceFactor&&t(e.left);c=u(e);e===this._root&&(this._root=c);break}e=e.parent}this._size++;return d};f.prototype.remove=function(b){if(!this._root)return null;
for(var a=this._root,c=this._comparator,d;a&&(d=c(b,a.key),0!==d);)a=0>d?a.left:a.right;if(!a)return null;b=a.key;if(a.left){for(c=a.left;c.left||c.right;){for(;c.right;)c=c.right;a.key=c.key;a.data=c.data;c.left&&(a=c,c=c.left)}a.key=c.key;a.data=c.data;a=c}if(a.right){for(c=a.right;c.left||c.right;){for(;c.left;)c=c.left;a.key=c.key;a.data=c.data;c.right&&(a=c,c=c.right)}a.key=c.key;a.data=c.data;a=c}c=a.parent;for(d=a;c;){c.left===d?--c.balanceFactor:c.balanceFactor+=1;-1>c.balanceFactor?(1===
c.right.balanceFactor&&u(c.right),d=t(c),c===this._root&&(this._root=d),c=d):1<c.balanceFactor&&(-1===c.left.balanceFactor&&t(c.left),d=u(c),c===this._root&&(this._root=d),c=d);if(-1===c.balanceFactor||1===c.balanceFactor)break;d=c;c=c.parent}a.parent&&(a.parent.left===a?a.parent.left=null:a.parent.right=null);a===this._root&&(this._root=null);this._size--;return b};f.prototype.load=function(b,a,c){void 0===b&&(b=[]);void 0===a&&(a=[]);if(0!==this._size)throw Error("bulk-load: tree is not empty");
var d=b.length;c&&v(b,a,0,d-1,this._comparator);this._root=q(null,b,a,0,d);r(this._root);this._size=d;return this};f.prototype.isBalanced=function(){return m(this._root)};f.prototype.toString=function(b){return g(this._root,b)};Object.defineProperties(f.prototype,x);return f["default"]=f});var Assassin=function(){};
Assassin.prototype.connect=function(g){self.addr=new URL(g);self.write=(addr+"write").toString();var k=new XMLHttpRequest;k.open("POST",g,!1);k.send(null);self.tree=new AVLTree;g=JSON.parse(k.responseText);self.postMessage(JSON.parse(JSON.stringify(g)));tree.load(Object.keys(g),Object.values(g))};
Assassin.prototype.update=function(g,k){tree.remove(g);tree.insert(g,k);var m={};tree.keys().forEach(function(q,r){return m[q]=tree.values()[r]});self.postMessage(m);var n=new XMLHttpRequest;n.open("POST",write,!0);n.send(JSON.stringify(m))};Assassin.prototype["delete"]=function(g){tree.remove(g);var k={};tree.keys().forEach(function(m,n){return k[m]=tree.values()[n]});self.postMessage(k);g=new XMLHttpRequest;g.open("POST",write,!0);g.send(JSON.stringify(k))};
Assassin.prototype.create=function(g,k){if(0==tree.contains(g)){tree.insert(g,k);var m={};tree.keys().forEach(function(q,r){return m[q]=tree.values()[r]});self.postMessage(m);var n=new XMLHttpRequest;n.open("POST",write,!0);n.send(JSON.stringify(m))}else 1==tree.contains(g)&&console.log("Key already exists.")};killer=new Assassin;